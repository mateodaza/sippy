import { ethers } from "hardhat";

async function main() {
  const contractAddress = process.env.REFUEL_CONTRACT_ADDRESS;

  if (!contractAddress) {
    console.error('‚ùå Please set REFUEL_CONTRACT_ADDRESS in .env');
    process.exit(1);
  }

  console.log('üîç Checking GasRefuel contract at:', contractAddress);
  console.log('');

  const GasRefuel = await ethers.getContractFactory("GasRefuel");
  const gasRefuel = GasRefuel.attach(contractAddress);

  try {
    // Basic info
    console.log('üìã Contract Status:');
    const owner = await gasRefuel.owner();
    const paused = await gasRefuel.paused();
    const balance = await gasRefuel.contractBalance();

    console.log('  ‚Ä¢ Owner:', owner);
    console.log('  ‚Ä¢ Paused:', paused ? '‚è∏Ô∏è  Yes' : '‚ñ∂Ô∏è  No');
    console.log('  ‚Ä¢ Balance:', ethers.formatEther(balance), 'ETH');
    console.log('');

    // Constants
    console.log('‚öôÔ∏è  Configuration:');
    const minBalance = await gasRefuel.MIN_BALANCE();
    const refuelAmount = await gasRefuel.REFUEL_AMOUNT();
    const maxDaily = await gasRefuel.MAX_DAILY_REFUELS();
    const cooldown = await gasRefuel.REFUEL_COOLDOWN();

    console.log('  ‚Ä¢ MIN_BALANCE:', ethers.formatEther(minBalance), 'ETH');
    console.log('  ‚Ä¢ REFUEL_AMOUNT:', ethers.formatEther(refuelAmount), 'ETH');
    console.log('  ‚Ä¢ MAX_DAILY_REFUELS:', maxDaily.toString());
    console.log('  ‚Ä¢ REFUEL_COOLDOWN:', cooldown.toString(), 'seconds');
    console.log('');

    // Estimate capacity
    const balanceNum = Number(ethers.formatEther(balance));
    const refuelNum = Number(ethers.formatEther(refuelAmount));
    const capacity = refuelNum > 0 ? Math.floor(balanceNum / refuelNum) : 0;

    console.log('üìä Capacity:');
    console.log('  ‚Ä¢ Refuels remaining:', capacity);
    console.log('  ‚Ä¢ Users serviceable:', capacity);
    console.log('');

    // Warnings
    if (paused) {
      console.log('‚ö†Ô∏è  WARNING: Contract is PAUSED. Run unpause() to activate.');
    }

    if (balanceNum < 0.01) {
      console.log('‚ö†Ô∏è  WARNING: Low balance. Consider adding more ETH.');
    }

    if (balanceNum === 0) {
      console.log('‚ùå ERROR: Contract has no ETH. Send ETH before unpausing.');
    }

    console.log('');
    console.log('‚úÖ Contract check complete!');

  } catch (error: any) {
    console.error('‚ùå Error checking contract:', error.message);
    process.exit(1);
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error(error);
    process.exit(1);
  });

